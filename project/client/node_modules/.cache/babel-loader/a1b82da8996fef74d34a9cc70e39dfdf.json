{"ast":null,"code":"import { useState, useCallback } from \"react\";\nimport { isFunction } from \"@rpldy/shared\";\nimport { useBatchStartListener } from \"@rpldy/shared-ui\";\nimport { PREVIEW_TYPES } from \"./consts\";\nimport { getWithMandatoryOptions, getFallbackUrlData, getFileObjectUrlByType } from \"./utils\";\n\nconst getFilePreviewUrl = (file, options) => {\n  let data = getFileObjectUrlByType(PREVIEW_TYPES.IMAGE, options.imageMimeTypes, options.maxPreviewImageSize || 0, file);\n\n  if (!data) {\n    data = getFileObjectUrlByType(PREVIEW_TYPES.VIDEO, options.videoMimeTypes, options.maxPreviewVideoSize || 0, file);\n  }\n\n  return data;\n};\n\nconst loadPreviewData = (item, options, previewComponentProps) => {\n  let data,\n      props,\n      isFallback = false;\n\n  if (item.file) {\n    const file = item.file;\n    data = getFilePreviewUrl(item.file, options);\n\n    if (!data) {\n      data = getFallbackUrlData(options.fallbackUrl, file);\n      isFallback = true;\n    }\n  } else {\n    data = {\n      url: item.url,\n      name: item.url,\n      type: PREVIEW_TYPES.IMAGE\n    };\n  }\n\n  if (data) {\n    const {\n      url,\n      type\n    } = data;\n    props = isFunction(previewComponentProps) ? previewComponentProps(item, url, type) : previewComponentProps;\n  }\n\n  return data && { ...data,\n    id: item.id,\n    isFallback,\n    props\n  };\n};\n\nconst mergePreviewData = (prev, next) => {\n  const newItems = []; //dedupe and merge new with existing\n\n  next.forEach(n => {\n    const existingIndex = prev.findIndex(p => p.id === n.id);\n\n    if (~existingIndex) {\n      prev.splice(existingIndex, 1, n);\n    } else {\n      newItems.push(n);\n    }\n  });\n  return prev.concat(newItems);\n};\n\nexport default (props => {\n  const [previews, setPreviews] = useState([]);\n  const previewOptions = getWithMandatoryOptions(props);\n  const clearPreviews = useCallback(() => {\n    setPreviews([]);\n  }, []);\n  useBatchStartListener(batch => {\n    const items = previewOptions.loadFirstOnly ? batch.items.slice(0, 1) : batch.items;\n    const previewsData = items.map(item => loadPreviewData(item, previewOptions, props.previewComponentProps)).filter(Boolean);\n    setPreviews(props.rememberPreviousBatches ? mergePreviewData(previews, previewsData) : previewsData);\n  });\n  return {\n    previews,\n    clearPreviews\n  };\n});","map":{"version":3,"sources":["C:/Users/USER/Documents/GitHub/project-good/project/client/node_modules/@rpldy/upload-preview/lib/esm/usePreviewsLoader.js"],"names":["useState","useCallback","isFunction","useBatchStartListener","PREVIEW_TYPES","getWithMandatoryOptions","getFallbackUrlData","getFileObjectUrlByType","getFilePreviewUrl","file","options","data","IMAGE","imageMimeTypes","maxPreviewImageSize","VIDEO","videoMimeTypes","maxPreviewVideoSize","loadPreviewData","item","previewComponentProps","props","isFallback","fallbackUrl","url","name","type","id","mergePreviewData","prev","next","newItems","forEach","n","existingIndex","findIndex","p","splice","push","concat","previews","setPreviews","previewOptions","clearPreviews","batch","items","loadFirstOnly","slice","previewsData","map","filter","Boolean","rememberPreviousBatches"],"mappings":"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","sourcesContent":["import { useState, useCallback } from \"react\";\nimport { isFunction } from \"@rpldy/shared\";\nimport { useBatchStartListener } from \"@rpldy/shared-ui\";\nimport { PREVIEW_TYPES } from \"./consts\";\nimport { getWithMandatoryOptions, getFallbackUrlData, getFileObjectUrlByType } from \"./utils\";\n\nconst getFilePreviewUrl = (file, options) => {\n  let data = getFileObjectUrlByType(PREVIEW_TYPES.IMAGE, options.imageMimeTypes, options.maxPreviewImageSize || 0, file);\n\n  if (!data) {\n    data = getFileObjectUrlByType(PREVIEW_TYPES.VIDEO, options.videoMimeTypes, options.maxPreviewVideoSize || 0, file);\n  }\n\n  return data;\n};\n\nconst loadPreviewData = (item, options, previewComponentProps) => {\n  let data,\n      props,\n      isFallback = false;\n\n  if (item.file) {\n    const file = item.file;\n    data = getFilePreviewUrl(item.file, options);\n\n    if (!data) {\n      data = getFallbackUrlData(options.fallbackUrl, file);\n      isFallback = true;\n    }\n  } else {\n    data = {\n      url: item.url,\n      name: item.url,\n      type: PREVIEW_TYPES.IMAGE\n    };\n  }\n\n  if (data) {\n    const {\n      url,\n      type\n    } = data;\n    props = isFunction(previewComponentProps) ? previewComponentProps(item, url, type) : previewComponentProps;\n  }\n\n  return data && { ...data,\n    id: item.id,\n    isFallback,\n    props\n  };\n};\n\nconst mergePreviewData = (prev, next) => {\n  const newItems = []; //dedupe and merge new with existing\n\n  next.forEach(n => {\n    const existingIndex = prev.findIndex(p => p.id === n.id);\n\n    if (~existingIndex) {\n      prev.splice(existingIndex, 1, n);\n    } else {\n      newItems.push(n);\n    }\n  });\n  return prev.concat(newItems);\n};\n\nexport default (props => {\n  const [previews, setPreviews] = useState([]);\n  const previewOptions = getWithMandatoryOptions(props);\n  const clearPreviews = useCallback(() => {\n    setPreviews([]);\n  }, []);\n  useBatchStartListener(batch => {\n    const items = previewOptions.loadFirstOnly ? batch.items.slice(0, 1) : batch.items;\n    const previewsData = items.map(item => loadPreviewData(item, previewOptions, props.previewComponentProps)).filter(Boolean);\n    setPreviews(props.rememberPreviousBatches ? mergePreviewData(previews, previewsData) : previewsData);\n  });\n  return {\n    previews,\n    clearPreviews\n  };\n});"]},"metadata":{},"sourceType":"module"}