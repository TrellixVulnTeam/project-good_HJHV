{"ast":null,"code":"import { isFunction } from \"@rpldy/shared\";\nimport { PREVIEW_TYPES } from \"./consts\";\nimport { PREVIEW_DEFAULTS } from \"./defaults\";\n\nconst getWithMandatoryOptions = options => {\n  return { ...PREVIEW_DEFAULTS,\n    ...options\n  };\n};\n\nconst getFallbackUrlData = (fallbackProp, file) => {\n  let data = isFunction(fallbackProp) ? fallbackProp(file) : fallbackProp;\n\n  if (typeof data === \"string\") {\n    data = {\n      id: \"\",\n      url: data,\n      name: file.name,\n      type: PREVIEW_TYPES.IMAGE\n    };\n  }\n\n  return data;\n};\n\nconst getFileObjectUrlByType = (type, mimeTypes, max, file) => {\n  let data;\n\n  if (mimeTypes && ~mimeTypes.indexOf(file.type)) {\n    if (!max || file.size <= max) {\n      data = {\n        url: URL.createObjectURL(file),\n        name: file.name,\n        type\n      };\n    }\n  }\n\n  return data;\n};\n\nexport { isFunction, getWithMandatoryOptions, getFallbackUrlData, getFileObjectUrlByType };","map":{"version":3,"sources":["C:/Users/USER/Documents/GitHub/project-good/project/client/node_modules/@rpldy/upload-preview/lib/esm/utils.js"],"names":["isFunction","PREVIEW_TYPES","PREVIEW_DEFAULTS","getWithMandatoryOptions","options","getFallbackUrlData","fallbackProp","file","data","id","url","name","type","IMAGE","getFileObjectUrlByType","mimeTypes","max","indexOf","size","URL","createObjectURL"],"mappings":"AAAA,SAASA,UAAT,QAA2B,eAA3B;AACA,SAASC,aAAT,QAA8B,UAA9B;AACA,SAASC,gBAAT,QAAiC,YAAjC;;AAEA,MAAMC,uBAAuB,GAAGC,OAAO,IAAI;AACzC,SAAO,EAAE,GAAGF,gBAAL;AACL,OAAGE;AADE,GAAP;AAGD,CAJD;;AAMA,MAAMC,kBAAkB,GAAG,CAACC,YAAD,EAAeC,IAAf,KAAwB;AACjD,MAAIC,IAAI,GAAGR,UAAU,CAACM,YAAD,CAAV,GAA2BA,YAAY,CAACC,IAAD,CAAvC,GAAgDD,YAA3D;;AAEA,MAAI,OAAOE,IAAP,KAAgB,QAApB,EAA8B;AAC5BA,IAAAA,IAAI,GAAG;AACLC,MAAAA,EAAE,EAAE,EADC;AAELC,MAAAA,GAAG,EAAEF,IAFA;AAGLG,MAAAA,IAAI,EAAEJ,IAAI,CAACI,IAHN;AAILC,MAAAA,IAAI,EAAEX,aAAa,CAACY;AAJf,KAAP;AAMD;;AAED,SAAOL,IAAP;AACD,CAbD;;AAeA,MAAMM,sBAAsB,GAAG,CAACF,IAAD,EAAOG,SAAP,EAAkBC,GAAlB,EAAuBT,IAAvB,KAAgC;AAC7D,MAAIC,IAAJ;;AAEA,MAAIO,SAAS,IAAI,CAACA,SAAS,CAACE,OAAV,CAAkBV,IAAI,CAACK,IAAvB,CAAlB,EAAgD;AAC9C,QAAI,CAACI,GAAD,IAAQT,IAAI,CAACW,IAAL,IAAaF,GAAzB,EAA8B;AAC5BR,MAAAA,IAAI,GAAG;AACLE,QAAAA,GAAG,EAAES,GAAG,CAACC,eAAJ,CAAoBb,IAApB,CADA;AAELI,QAAAA,IAAI,EAAEJ,IAAI,CAACI,IAFN;AAGLC,QAAAA;AAHK,OAAP;AAKD;AACF;;AAED,SAAOJ,IAAP;AACD,CAdD;;AAgBA,SAASR,UAAT,EAAqBG,uBAArB,EAA8CE,kBAA9C,EAAkES,sBAAlE","sourcesContent":["import { isFunction } from \"@rpldy/shared\";\nimport { PREVIEW_TYPES } from \"./consts\";\nimport { PREVIEW_DEFAULTS } from \"./defaults\";\n\nconst getWithMandatoryOptions = options => {\n  return { ...PREVIEW_DEFAULTS,\n    ...options\n  };\n};\n\nconst getFallbackUrlData = (fallbackProp, file) => {\n  let data = isFunction(fallbackProp) ? fallbackProp(file) : fallbackProp;\n\n  if (typeof data === \"string\") {\n    data = {\n      id: \"\",\n      url: data,\n      name: file.name,\n      type: PREVIEW_TYPES.IMAGE\n    };\n  }\n\n  return data;\n};\n\nconst getFileObjectUrlByType = (type, mimeTypes, max, file) => {\n  let data;\n\n  if (mimeTypes && ~mimeTypes.indexOf(file.type)) {\n    if (!max || file.size <= max) {\n      data = {\n        url: URL.createObjectURL(file),\n        name: file.name,\n        type\n      };\n    }\n  }\n\n  return data;\n};\n\nexport { isFunction, getWithMandatoryOptions, getFallbackUrlData, getFileObjectUrlByType };"]},"metadata":{},"sourceType":"module"}