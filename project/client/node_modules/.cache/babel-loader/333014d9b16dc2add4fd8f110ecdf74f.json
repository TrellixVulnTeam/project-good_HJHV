{"ast":null,"code":"import { isFunction } from \"@rpldy/shared\";\n/**\n * mimics FormData.set() when its not available (react-native)\n * in case FormData.delete() isnt available, will append only (unlike set)\n */\n\nconst addToFormData = (fd, name, ...rest) => {\n  //rest = [value, fileName = undefined]\n  if (\"set\" in fd) {\n    // $FlowFixMe - ignore flow for not allowing FileLike here\n    fd.set(name, ...rest);\n  } else {\n    if (\"delete\" in fd) {\n      fd.delete(name);\n    } // $FlowFixMe - ignore flow for not allowing FileLike here\n\n\n    fd.append(name, ...rest);\n  }\n};\n\nconst getFormFileField = (fd, items, options) => {\n  const single = items.length === 1;\n  items.forEach((item, i) => {\n    const name = single ? options.paramName : isFunction(options.formatGroupParamName) ? options.formatGroupParamName(i, options.paramName) : `${options.paramName}[${i}]`;\n\n    if (item.file) {\n      addToFormData(fd, name, item.file, item.file.name);\n    } else if (item.url) {\n      addToFormData(fd, name, item.url);\n    }\n  });\n};\n\nconst prepareFormData = (items, options) => {\n  const fd = new FormData();\n\n  if (options.params) {\n    Object.entries(options.params).forEach(([key, val]) => addToFormData(fd, key, val));\n  }\n\n  getFormFileField(fd, items, options);\n  return fd;\n};\n\nexport default prepareFormData;","map":{"version":3,"sources":["C:/Users/USER/Documents/GitHub/project-good/project/client/node_modules/@rpldy/sender/lib/esm/xhrSender/prepareFormData.js"],"names":["isFunction","addToFormData","fd","name","rest","set","delete","append","getFormFileField","items","options","single","length","forEach","item","i","paramName","formatGroupParamName","file","url","prepareFormData","FormData","params","Object","entries","key","val"],"mappings":"AAAA,SAASA,UAAT,QAA2B,eAA3B;AAEA;AACA;AACA;AACA;;AACA,MAAMC,aAAa,GAAG,CAACC,EAAD,EAAKC,IAAL,EAAW,GAAGC,IAAd,KAAuB;AAC3C;AACA,MAAI,SAASF,EAAb,EAAiB;AACf;AACAA,IAAAA,EAAE,CAACG,GAAH,CAAOF,IAAP,EAAa,GAAGC,IAAhB;AACD,GAHD,MAGO;AACL,QAAI,YAAYF,EAAhB,EAAoB;AAClBA,MAAAA,EAAE,CAACI,MAAH,CAAUH,IAAV;AACD,KAHI,CAGH;;;AAGFD,IAAAA,EAAE,CAACK,MAAH,CAAUJ,IAAV,EAAgB,GAAGC,IAAnB;AACD;AACF,CAbD;;AAeA,MAAMI,gBAAgB,GAAG,CAACN,EAAD,EAAKO,KAAL,EAAYC,OAAZ,KAAwB;AAC/C,QAAMC,MAAM,GAAGF,KAAK,CAACG,MAAN,KAAiB,CAAhC;AACAH,EAAAA,KAAK,CAACI,OAAN,CAAc,CAACC,IAAD,EAAOC,CAAP,KAAa;AACzB,UAAMZ,IAAI,GAAGQ,MAAM,GAAGD,OAAO,CAACM,SAAX,GAAuBhB,UAAU,CAACU,OAAO,CAACO,oBAAT,CAAV,GAA2CP,OAAO,CAACO,oBAAR,CAA6BF,CAA7B,EAAgCL,OAAO,CAACM,SAAxC,CAA3C,GAAiG,GAAEN,OAAO,CAACM,SAAU,IAAGD,CAAE,GAApK;;AAEA,QAAID,IAAI,CAACI,IAAT,EAAe;AACbjB,MAAAA,aAAa,CAACC,EAAD,EAAKC,IAAL,EAAWW,IAAI,CAACI,IAAhB,EAAsBJ,IAAI,CAACI,IAAL,CAAUf,IAAhC,CAAb;AACD,KAFD,MAEO,IAAIW,IAAI,CAACK,GAAT,EAAc;AACnBlB,MAAAA,aAAa,CAACC,EAAD,EAAKC,IAAL,EAAWW,IAAI,CAACK,GAAhB,CAAb;AACD;AACF,GARD;AASD,CAXD;;AAaA,MAAMC,eAAe,GAAG,CAACX,KAAD,EAAQC,OAAR,KAAoB;AAC1C,QAAMR,EAAE,GAAG,IAAImB,QAAJ,EAAX;;AAEA,MAAIX,OAAO,CAACY,MAAZ,EAAoB;AAClBC,IAAAA,MAAM,CAACC,OAAP,CAAed,OAAO,CAACY,MAAvB,EAA+BT,OAA/B,CAAuC,CAAC,CAACY,GAAD,EAAMC,GAAN,CAAD,KAAgBzB,aAAa,CAACC,EAAD,EAAKuB,GAAL,EAAUC,GAAV,CAApE;AACD;;AAEDlB,EAAAA,gBAAgB,CAACN,EAAD,EAAKO,KAAL,EAAYC,OAAZ,CAAhB;AACA,SAAOR,EAAP;AACD,CATD;;AAWA,eAAekB,eAAf","sourcesContent":["import { isFunction } from \"@rpldy/shared\";\n\n/**\n * mimics FormData.set() when its not available (react-native)\n * in case FormData.delete() isnt available, will append only (unlike set)\n */\nconst addToFormData = (fd, name, ...rest) => {\n  //rest = [value, fileName = undefined]\n  if (\"set\" in fd) {\n    // $FlowFixMe - ignore flow for not allowing FileLike here\n    fd.set(name, ...rest);\n  } else {\n    if (\"delete\" in fd) {\n      fd.delete(name);\n    } // $FlowFixMe - ignore flow for not allowing FileLike here\n\n\n    fd.append(name, ...rest);\n  }\n};\n\nconst getFormFileField = (fd, items, options) => {\n  const single = items.length === 1;\n  items.forEach((item, i) => {\n    const name = single ? options.paramName : isFunction(options.formatGroupParamName) ? options.formatGroupParamName(i, options.paramName) : `${options.paramName}[${i}]`;\n\n    if (item.file) {\n      addToFormData(fd, name, item.file, item.file.name);\n    } else if (item.url) {\n      addToFormData(fd, name, item.url);\n    }\n  });\n};\n\nconst prepareFormData = (items, options) => {\n  const fd = new FormData();\n\n  if (options.params) {\n    Object.entries(options.params).forEach(([key, val]) => addToFormData(fd, key, val));\n  }\n\n  getFormFileField(fd, items, options);\n  return fd;\n};\n\nexport default prepareFormData;"]},"metadata":{},"sourceType":"module"}