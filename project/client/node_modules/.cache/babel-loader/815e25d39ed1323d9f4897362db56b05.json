{"ast":null,"code":"import { UPLOADER_EVENTS } from \"@rpldy/uploader\";\nimport { generateUploaderEventHook, generateUploaderEventHookWithState } from \"./utils\";\nconst useBatchAddListener = generateUploaderEventHook(UPLOADER_EVENTS.BATCH_ADD, false);\nconst useBatchStartListener = generateUploaderEventHook(UPLOADER_EVENTS.BATCH_START);\nconst useBatchFinishListener = generateUploaderEventHook(UPLOADER_EVENTS.BATCH_FINISH);\nconst useBatchCancelledListener = generateUploaderEventHook(UPLOADER_EVENTS.BATCH_CANCEL);\nconst useBatchAbortListener = generateUploaderEventHook(UPLOADER_EVENTS.BATCH_ABORT);\nconst useBatchProgressListener = generateUploaderEventHookWithState(UPLOADER_EVENTS.BATCH_PROGRESS, batch => ({ ...batch\n}));\nconst useItemStartListener = generateUploaderEventHook(UPLOADER_EVENTS.ITEM_START);\nconst useItemFinishListener = generateUploaderEventHook(UPLOADER_EVENTS.ITEM_FINISH);\nconst useItemCancelListener = generateUploaderEventHook(UPLOADER_EVENTS.ITEM_CANCEL);\nconst useItemErrorListener = generateUploaderEventHook(UPLOADER_EVENTS.ITEM_ERROR);\nconst useItemAbortListener = generateUploaderEventHook(UPLOADER_EVENTS.ITEM_ABORT);\nconst useItemFinalizeListener = generateUploaderEventHook(UPLOADER_EVENTS.ITEM_FINALIZE);\nconst useItemProgressListener = generateUploaderEventHookWithState(UPLOADER_EVENTS.ITEM_PROGRESS, item => ({ ...item\n}));\nconst useRequestPreSend = generateUploaderEventHook(UPLOADER_EVENTS.REQUEST_PRE_SEND, false);\nconst useAllAbortListener = generateUploaderEventHook(UPLOADER_EVENTS.ALL_ABORT, false);\nexport { useBatchAddListener, useBatchStartListener, useBatchFinishListener, useBatchCancelledListener, useBatchAbortListener, useBatchProgressListener, useItemStartListener, useItemFinishListener, useItemProgressListener, useItemCancelListener, useItemErrorListener, useItemAbortListener, useItemFinalizeListener, useRequestPreSend, useAllAbortListener };","map":{"version":3,"sources":["C:/Users/USER/Documents/GitHub/project-good/project/client/node_modules/@rpldy/shared-ui/lib/esm/eventListenerHooks.js"],"names":["UPLOADER_EVENTS","generateUploaderEventHook","generateUploaderEventHookWithState","useBatchAddListener","BATCH_ADD","useBatchStartListener","BATCH_START","useBatchFinishListener","BATCH_FINISH","useBatchCancelledListener","BATCH_CANCEL","useBatchAbortListener","BATCH_ABORT","useBatchProgressListener","BATCH_PROGRESS","batch","useItemStartListener","ITEM_START","useItemFinishListener","ITEM_FINISH","useItemCancelListener","ITEM_CANCEL","useItemErrorListener","ITEM_ERROR","useItemAbortListener","ITEM_ABORT","useItemFinalizeListener","ITEM_FINALIZE","useItemProgressListener","ITEM_PROGRESS","item","useRequestPreSend","REQUEST_PRE_SEND","useAllAbortListener","ALL_ABORT"],"mappings":"AAAA,SAASA,eAAT,QAAgC,iBAAhC;AACA,SAASC,yBAAT,EAAoCC,kCAApC,QAA8E,SAA9E;AACA,MAAMC,mBAAmB,GAAGF,yBAAyB,CAACD,eAAe,CAACI,SAAjB,EAA4B,KAA5B,CAArD;AACA,MAAMC,qBAAqB,GAAGJ,yBAAyB,CAACD,eAAe,CAACM,WAAjB,CAAvD;AACA,MAAMC,sBAAsB,GAAGN,yBAAyB,CAACD,eAAe,CAACQ,YAAjB,CAAxD;AACA,MAAMC,yBAAyB,GAAGR,yBAAyB,CAACD,eAAe,CAACU,YAAjB,CAA3D;AACA,MAAMC,qBAAqB,GAAGV,yBAAyB,CAACD,eAAe,CAACY,WAAjB,CAAvD;AACA,MAAMC,wBAAwB,GAAGX,kCAAkC,CAACF,eAAe,CAACc,cAAjB,EAAiCC,KAAK,KAAK,EAAE,GAAGA;AAAL,CAAL,CAAtC,CAAnE;AAEA,MAAMC,oBAAoB,GAAGf,yBAAyB,CAACD,eAAe,CAACiB,UAAjB,CAAtD;AACA,MAAMC,qBAAqB,GAAGjB,yBAAyB,CAACD,eAAe,CAACmB,WAAjB,CAAvD;AACA,MAAMC,qBAAqB,GAAGnB,yBAAyB,CAACD,eAAe,CAACqB,WAAjB,CAAvD;AACA,MAAMC,oBAAoB,GAAGrB,yBAAyB,CAACD,eAAe,CAACuB,UAAjB,CAAtD;AACA,MAAMC,oBAAoB,GAAGvB,yBAAyB,CAACD,eAAe,CAACyB,UAAjB,CAAtD;AACA,MAAMC,uBAAuB,GAAGzB,yBAAyB,CAACD,eAAe,CAAC2B,aAAjB,CAAzD;AACA,MAAMC,uBAAuB,GAAG1B,kCAAkC,CAACF,eAAe,CAAC6B,aAAjB,EAAgCC,IAAI,KAAK,EAAE,GAAGA;AAAL,CAAL,CAApC,CAAlE;AAEA,MAAMC,iBAAiB,GAAG9B,yBAAyB,CAACD,eAAe,CAACgC,gBAAjB,EAAmC,KAAnC,CAAnD;AACA,MAAMC,mBAAmB,GAAGhC,yBAAyB,CAACD,eAAe,CAACkC,SAAjB,EAA4B,KAA5B,CAArD;AACA,SAAS/B,mBAAT,EAA8BE,qBAA9B,EAAqDE,sBAArD,EAA6EE,yBAA7E,EAAwGE,qBAAxG,EAA+HE,wBAA/H,EAAyJG,oBAAzJ,EAA+KE,qBAA/K,EAAsMU,uBAAtM,EAA+NR,qBAA/N,EAAsPE,oBAAtP,EAA4QE,oBAA5Q,EAAkSE,uBAAlS,EAA2TK,iBAA3T,EAA8UE,mBAA9U","sourcesContent":["import { UPLOADER_EVENTS } from \"@rpldy/uploader\";\nimport { generateUploaderEventHook, generateUploaderEventHookWithState } from \"./utils\";\nconst useBatchAddListener = generateUploaderEventHook(UPLOADER_EVENTS.BATCH_ADD, false);\nconst useBatchStartListener = generateUploaderEventHook(UPLOADER_EVENTS.BATCH_START);\nconst useBatchFinishListener = generateUploaderEventHook(UPLOADER_EVENTS.BATCH_FINISH);\nconst useBatchCancelledListener = generateUploaderEventHook(UPLOADER_EVENTS.BATCH_CANCEL);\nconst useBatchAbortListener = generateUploaderEventHook(UPLOADER_EVENTS.BATCH_ABORT);\nconst useBatchProgressListener = generateUploaderEventHookWithState(UPLOADER_EVENTS.BATCH_PROGRESS, batch => ({ ...batch\n}));\nconst useItemStartListener = generateUploaderEventHook(UPLOADER_EVENTS.ITEM_START);\nconst useItemFinishListener = generateUploaderEventHook(UPLOADER_EVENTS.ITEM_FINISH);\nconst useItemCancelListener = generateUploaderEventHook(UPLOADER_EVENTS.ITEM_CANCEL);\nconst useItemErrorListener = generateUploaderEventHook(UPLOADER_EVENTS.ITEM_ERROR);\nconst useItemAbortListener = generateUploaderEventHook(UPLOADER_EVENTS.ITEM_ABORT);\nconst useItemFinalizeListener = generateUploaderEventHook(UPLOADER_EVENTS.ITEM_FINALIZE);\nconst useItemProgressListener = generateUploaderEventHookWithState(UPLOADER_EVENTS.ITEM_PROGRESS, item => ({ ...item\n}));\nconst useRequestPreSend = generateUploaderEventHook(UPLOADER_EVENTS.REQUEST_PRE_SEND, false);\nconst useAllAbortListener = generateUploaderEventHook(UPLOADER_EVENTS.ALL_ABORT, false);\nexport { useBatchAddListener, useBatchStartListener, useBatchFinishListener, useBatchCancelledListener, useBatchAbortListener, useBatchProgressListener, useItemStartListener, useItemFinishListener, useItemProgressListener, useItemCancelListener, useItemErrorListener, useItemAbortListener, useItemFinalizeListener, useRequestPreSend, useAllAbortListener };"]},"metadata":{},"sourceType":"module"}