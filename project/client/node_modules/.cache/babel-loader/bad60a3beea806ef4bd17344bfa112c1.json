{"ast":null,"code":"var _jsxFileName = \"D:\\\\project-good\\\\project\\\\client\\\\src\\\\components\\\\user\\\\UserTable.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport './yourProfile.scss';\nimport OrderOptions from './OrderOptions';\nimport moment from 'moment';\nimport { getUserOrdersListFromDB } from '../../utils/userUtils'; //מחזירה את ההזמנות של המשתמש\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst UserTable = props => {\n  _s();\n\n  const columns = [{\n    id: 'name',\n    label: 'Name',\n    minWidth: 170,\n    align: 'left'\n  }, {\n    id: 'orderDate',\n    label: 'Order Date',\n    minWidth: 100,\n    align: 'left' //    formatDate: (date) => Moment(date).format('DD-MM-YYYY')\n    // format: v => v.toLocaleDateString(\"en-US\")\n\n  }, {\n    id: 'sum',\n    //\n    label: 'Sum',\n    //מה יהיה רשום\n    minWidth: 170,\n    align: 'left',\n    format: value => value.toLocaleString('en-US')\n  }, {\n    id: 'options',\n    label: 'Options',\n    minWidth: 170,\n    align: 'left',\n    format: value => value.toLocaleString('en-US')\n  }];\n\n  const createData = order => {\n    const options = /*#__PURE__*/_jsxDEV(OrderOptions, {\n      order: order\n    }, order._id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 25\n    }, this); //הכפתורים\n\n\n    const n = order.auctionId.organizationName + \" : \" + order.auctionId.name;\n    let d = moment(new Date(order.orderDate)).format('D/MM/YYYY');\n    let sum = order.amountToPay;\n    return {\n      name: n,\n      orderDate: d,\n      sum: sum,\n      options\n    };\n  };\n\n  const [rows, setRows] = useState([]);\n  const useStyles = makeStyles({\n    root: {\n      width: '60%'\n    },\n    container: {\n      maxHeight: 440\n    }\n  });\n  useEffect(() => {\n    getUserOrdersListFromDB(\"611c2f2e18f13934fc07bc27\"\n    /*props.userId*/\n    ).then(succ => {\n      let arr = [];\n      succ.data.map(o => {\n        arr.push(createData(o));\n      });\n      console.log(succ.data);\n      setRows(arr);\n    });\n  }, []);\n  const classes = useStyles();\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\n  const style1 = {\n    marginLeft: '36vw',\n    marginTop: '4vh'\n  };\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    className: classes.root,\n    style: style1,\n    children: /*#__PURE__*/_jsxDEV(TableContainer, {\n      className: classes.container,\n      children: /*#__PURE__*/_jsxDEV(Table, {\n        stickyHeader: true,\n        \"aria-label\": \"sticky table\",\n        children: [/*#__PURE__*/_jsxDEV(TableHead, {\n          children: /*#__PURE__*/_jsxDEV(TableRow, {\n            children: columns.map(column => /*#__PURE__*/_jsxDEV(TableCell, {\n              align: column.align,\n              style: {\n                minWidth: column.minWidth\n              },\n              children: column.label\n            }, column.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 33\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n          children: rows && rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map(row => {\n            return /*#__PURE__*/_jsxDEV(TableRow, {\n              hover: true,\n              role: \"checkbox\",\n              tabIndex: -1,\n              children: columns.map(column => {\n                const value = row[column.id];\n                return /*#__PURE__*/_jsxDEV(TableCell, {\n                  align: column.align,\n                  children: value\n                }, column.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 110,\n                  columnNumber: 45\n                }, this);\n              })\n            }, row.code, false, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 33\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 9\n  }, this);\n};\n\n_s(UserTable, \"hfHNHjNlPQt8/EnlOMymtp/YzgA=\", true);\n\n_c = UserTable;\n\nconst mapStateToProps = state => {\n  return {\n    user: state.user.currentUser,\n    orders: state.user.ordersList\n  };\n};\n\nexport default connect(mapStateToProps, {})(UserTable);\n\nvar _c;\n\n$RefreshReg$(_c, \"UserTable\");","map":{"version":3,"sources":["D:/project-good/project/client/src/components/user/UserTable.js"],"names":["React","useEffect","useState","connect","makeStyles","Paper","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","OrderOptions","moment","getUserOrdersListFromDB","UserTable","props","columns","id","label","minWidth","align","format","value","toLocaleString","createData","order","options","_id","n","auctionId","organizationName","name","d","Date","orderDate","sum","amountToPay","rows","setRows","useStyles","root","width","container","maxHeight","then","succ","arr","data","map","o","push","console","log","classes","page","setPage","rowsPerPage","setRowsPerPage","style1","marginLeft","marginTop","column","slice","row","code","mapStateToProps","state","user","currentUser","orders","ordersList"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,KAAP,MAAkB,yBAAlB;AACA,OAAOC,KAAP,MAAkB,yBAAlB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,cAAP,MAA2B,kCAA3B;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAO,oBAAP;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,SAASC,uBAAT,QAAwC,uBAAxC,C,CAA+D;;;;AAE/D,MAAMC,SAAS,GAAIC,KAAD,IAAW;AAAA;;AACzB,QAAMC,OAAO,GAAG,CACZ;AACIC,IAAAA,EAAE,EAAE,MADR;AAEIC,IAAAA,KAAK,EAAE,MAFX;AAGIC,IAAAA,QAAQ,EAAE,GAHd;AAIIC,IAAAA,KAAK,EAAE;AAJX,GADY,EAQZ;AACIH,IAAAA,EAAE,EAAE,WADR;AAEIC,IAAAA,KAAK,EAAE,YAFX;AAGIC,IAAAA,QAAQ,EAAE,GAHd;AAIIC,IAAAA,KAAK,EAAE,MAJX,CAKI;AACA;;AANJ,GARY,EAiBZ;AACIH,IAAAA,EAAE,EAAE,KADR;AACc;AACVC,IAAAA,KAAK,EAAE,KAFX;AAEiB;AACbC,IAAAA,QAAQ,EAAE,GAHd;AAIIC,IAAAA,KAAK,EAAE,MAJX;AAKIC,IAAAA,MAAM,EAAGC,KAAD,IAAWA,KAAK,CAACC,cAAN,CAAqB,OAArB;AALvB,GAjBY,EAwBZ;AACIN,IAAAA,EAAE,EAAE,SADR;AAEIC,IAAAA,KAAK,EAAE,SAFX;AAGIC,IAAAA,QAAQ,EAAE,GAHd;AAIIC,IAAAA,KAAK,EAAE,MAJX;AAKIC,IAAAA,MAAM,EAAGC,KAAD,IAAWA,KAAK,CAACC,cAAN,CAAqB,OAArB;AALvB,GAxBY,CAAhB;;AAiCA,QAAMC,UAAU,GAAIC,KAAD,IAAW;AAC1B,UAAMC,OAAO,gBAAG,QAAC,YAAD;AAAc,MAAA,KAAK,EAAED;AAArB,OAAiCA,KAAK,CAACE,GAAvC;AAAA;AAAA;AAAA;AAAA,YAAhB,CAD0B,CACqC;;;AAC/D,UAAMC,CAAC,GAAGH,KAAK,CAACI,SAAN,CAAgBC,gBAAhB,GAAmC,KAAnC,GAA2CL,KAAK,CAACI,SAAN,CAAgBE,IAArE;AACA,QAAIC,CAAC,GAAGpB,MAAM,CAAC,IAAIqB,IAAJ,CAASR,KAAK,CAACS,SAAf,CAAD,CAAN,CAAkCb,MAAlC,CAAyC,WAAzC,CAAR;AACA,QAAIc,GAAG,GAAGV,KAAK,CAACW,WAAhB;AACA,WAAO;AAAEL,MAAAA,IAAI,EAAEH,CAAR;AAAWM,MAAAA,SAAS,EAAEF,CAAtB;AAAyBG,MAAAA,GAAG,EAAEA,GAA9B;AAAmCT,MAAAA;AAAnC,KAAP;AACH,GAND;;AAQA,QAAM,CAACW,IAAD,EAAOC,OAAP,IAAkBrC,QAAQ,CAAC,EAAD,CAAhC;AAEA,QAAMsC,SAAS,GAAGpC,UAAU,CAAC;AACzBqC,IAAAA,IAAI,EAAE;AACFC,MAAAA,KAAK,EAAE;AADL,KADmB;AAIzBC,IAAAA,SAAS,EAAE;AACPC,MAAAA,SAAS,EAAE;AADJ;AAJc,GAAD,CAA5B;AAUA3C,EAAAA,SAAS,CAAC,MAAM;AACZa,IAAAA,uBAAuB,CAAC;AAA0B;AAA3B,KAAvB,CAAoE+B,IAApE,CAAyEC,IAAI,IAAI;AAC7E,UAAIC,GAAG,GAAG,EAAV;AACAD,MAAAA,IAAI,CAACE,IAAL,CAAUC,GAAV,CAAeC,CAAD,IAAO;AAAEH,QAAAA,GAAG,CAACI,IAAJ,CAAS1B,UAAU,CAACyB,CAAD,CAAnB;AAAyB,OAAhD;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAYP,IAAI,CAACE,IAAjB;AACAT,MAAAA,OAAO,CAACQ,GAAD,CAAP;AACH,KALD;AAMH,GAPQ,EAON,EAPM,CAAT;AASA,QAAMO,OAAO,GAAGd,SAAS,EAAzB;AACA,QAAM,CAACe,IAAD,EAAOC,OAAP,IAAkBxD,KAAK,CAACE,QAAN,CAAe,CAAf,CAAxB;AACA,QAAM,CAACuD,WAAD,EAAcC,cAAd,IAAgC1D,KAAK,CAACE,QAAN,CAAe,EAAf,CAAtC;AAGA,QAAMyD,MAAM,GAAG;AAAEC,IAAAA,UAAU,EAAE,MAAd;AAAsBC,IAAAA,SAAS,EAAE;AAAjC,GAAf;AACA,sBACI,QAAC,KAAD;AAAO,IAAA,SAAS,EAAEP,OAAO,CAACb,IAA1B;AAAgC,IAAA,KAAK,EAAEkB,MAAvC;AAAA,2BACI,QAAC,cAAD;AAAgB,MAAA,SAAS,EAAEL,OAAO,CAACX,SAAnC;AAAA,6BACI,QAAC,KAAD;AAAO,QAAA,YAAY,MAAnB;AAAoB,sBAAW,cAA/B;AAAA,gCACI,QAAC,SAAD;AAAA,iCACI,QAAC,QAAD;AAAA,sBACK1B,OAAO,CAACgC,GAAR,CAAaa,MAAD,iBACT,QAAC,SAAD;AAEI,cAAA,KAAK,EAAEA,MAAM,CAACzC,KAFlB;AAGI,cAAA,KAAK,EAAE;AAAED,gBAAAA,QAAQ,EAAE0C,MAAM,CAAC1C;AAAnB,eAHX;AAAA,wBAKK0C,MAAM,CAAC3C;AALZ,eACS2C,MAAM,CAAC5C,EADhB;AAAA;AAAA;AAAA;AAAA,oBADH;AADL;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBADJ,eAcI,QAAC,SAAD;AAAA,oBACKoB,IAAI,IAAEA,IAAI,CAACyB,KAAL,CAAWR,IAAI,GAAGE,WAAlB,EAA+BF,IAAI,GAAGE,WAAP,GAAqBA,WAApD,EAAiER,GAAjE,CAAsEe,GAAD,IAAS;AACjF,gCACI,QAAC,QAAD;AAAU,cAAA,KAAK,MAAf;AAAgB,cAAA,IAAI,EAAC,UAArB;AAAgC,cAAA,QAAQ,EAAE,CAAC,CAA3C;AAAA,wBACK/C,OAAO,CAACgC,GAAR,CAAaa,MAAD,IAAY;AAErB,sBAAMvC,KAAK,GAAGyC,GAAG,CAACF,MAAM,CAAC5C,EAAR,CAAjB;AACA,oCACI,QAAC,SAAD;AAA2B,kBAAA,KAAK,EAAE4C,MAAM,CAACzC,KAAzC;AAAA,4BACKE;AADL,mBAAgBuC,MAAM,CAAC5C,EAAvB;AAAA;AAAA;AAAA;AAAA,wBADJ;AAKH,eARA;AADL,eAAmD8C,GAAG,CAACC,IAAvD;AAAA;AAAA;AAAA;AAAA,oBADJ;AAaH,WAdM;AADX;AAAA;AAAA;AAAA;AAAA,gBAdJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAsCH,CA3GD;;GAAMlD,S;;KAAAA,S;;AA6GN,MAAMmD,eAAe,GAAIC,KAAD,IAAW;AAC/B,SAAO;AACHC,IAAAA,IAAI,EAAED,KAAK,CAACC,IAAN,CAAWC,WADd;AAEHC,IAAAA,MAAM,EAAEH,KAAK,CAACC,IAAN,CAAWG;AAFhB,GAAP;AAIH,CALD;;AAMA,eAAepE,OAAO,CAAC+D,eAAD,EAAkB,EAAlB,CAAP,CAA6BnD,SAA7B,CAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport './yourProfile.scss'\r\nimport OrderOptions from './OrderOptions';\r\nimport moment from 'moment'\r\nimport { getUserOrdersListFromDB } from '../../utils/userUtils'//מחזירה את ההזמנות של המשתמש\r\n\r\nconst UserTable = (props) => {\r\n    const columns = [\r\n        {\r\n            id: 'name',\r\n            label: 'Name',\r\n            minWidth: 170,\r\n            align: 'left',\r\n\r\n        },\r\n        {\r\n            id: 'orderDate',\r\n            label: 'Order Date',\r\n            minWidth: 100,\r\n            align: 'left',\r\n            //    formatDate: (date) => Moment(date).format('DD-MM-YYYY')\r\n            // format: v => v.toLocaleDateString(\"en-US\")\r\n\r\n        },\r\n        {\r\n            id: 'sum',//\r\n            label: 'Sum',//מה יהיה רשום\r\n            minWidth: 170,\r\n            align: 'left',\r\n            format: (value) => value.toLocaleString('en-US'),\r\n        },\r\n        {\r\n            id: 'options',\r\n            label: 'Options',\r\n            minWidth: 170,\r\n            align: 'left',\r\n            format: (value) => value.toLocaleString('en-US'),\r\n        }\r\n    ];\r\n\r\n    const createData = (order) => {\r\n        const options = <OrderOptions order={order} key={order._id} />;//הכפתורים\r\n        const n = order.auctionId.organizationName + \" : \" + order.auctionId.name;\r\n        let d = moment(new Date(order.orderDate)).format('D/MM/YYYY');\r\n        let sum = order.amountToPay;\r\n        return { name: n, orderDate: d, sum: sum, options };\r\n    }\r\n\r\n    const [rows, setRows] = useState([]);\r\n\r\n    const useStyles = makeStyles({\r\n        root: {\r\n            width: '60%',\r\n        },\r\n        container: {\r\n            maxHeight: 440,\r\n        },\r\n    });\r\n    \r\n\r\n    useEffect(() => {\r\n        getUserOrdersListFromDB(\"611c2f2e18f13934fc07bc27\"/*props.userId*/).then(succ => {\r\n            let arr = [];\r\n            succ.data.map((o) => { arr.push(createData(o)) });\r\n            console.log(succ.data);\r\n            setRows(arr);\r\n        });\r\n    }, [])\r\n\r\n    const classes = useStyles();\r\n    const [page, setPage] = React.useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = React.useState(10);\r\n\r\n\r\n    const style1 = { marginLeft: '36vw', marginTop: '4vh' }\r\n    return (\r\n        <Paper className={classes.root} style={style1}>\r\n            <TableContainer className={classes.container} >\r\n                <Table stickyHeader aria-label=\"sticky table\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            {columns.map((column) => (\r\n                                <TableCell\r\n                                    key={column.id}\r\n                                    align={column.align}\r\n                                    style={{ minWidth: column.minWidth }}\r\n                                >\r\n                                    {column.label}\r\n                                </TableCell>\r\n                            ))}\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {rows&&rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row) => {\r\n                            return (\r\n                                <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.code}>\r\n                                    {columns.map((column) => {\r\n\r\n                                        const value = row[column.id];\r\n                                        return (\r\n                                            <TableCell key={column.id} align={column.align}>\r\n                                                {value}\r\n                                            </TableCell>\r\n                                        );\r\n                                    })}\r\n                                </TableRow>\r\n                            );\r\n                        })}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n        </Paper>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        user: state.user.currentUser,\r\n        orders: state.user.ordersList\r\n    };\r\n}\r\nexport default connect(mapStateToProps, {})(UserTable);\r\n"]},"metadata":{},"sourceType":"module"}