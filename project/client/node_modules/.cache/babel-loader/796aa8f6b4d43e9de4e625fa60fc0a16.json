{"ast":null,"code":"const isEmpty = val => val === null || val === undefined;\n\nexport default ((trigger, event, ...args) => {\n  const doTrigger = (event, ...args) => new Promise((resolve, reject) => {\n    const results = trigger(event, ...args);\n\n    if (results && results.length) {\n      Promise.all(results).catch(reject).then(resolvedResults => {\n        let result;\n\n        if (resolvedResults) {\n          while (isEmpty(result) && resolvedResults.length) {\n            result = resolvedResults.pop();\n          }\n        }\n\n        resolve(isEmpty(result) ? undefined : result);\n      });\n    } else {\n      resolve();\n    }\n  });\n\n  return event ? doTrigger(event, ...args) : doTrigger;\n});","map":{"version":3,"sources":["D:/project-good/project/client/node_modules/@rpldy/shared/lib/esm/triggerUpdater.js"],"names":["isEmpty","val","undefined","trigger","event","args","doTrigger","Promise","resolve","reject","results","length","all","catch","then","resolvedResults","result","pop"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,GAAG,IAAIA,GAAG,KAAK,IAAR,IAAgBA,GAAG,KAAKC,SAA/C;;AAEA,gBAAgB,CAACC,OAAD,EAAUC,KAAV,EAAiB,GAAGC,IAApB,KAA6B;AAC3C,QAAMC,SAAS,GAAG,CAACF,KAAD,EAAQ,GAAGC,IAAX,KAAoB,IAAIE,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACrE,UAAMC,OAAO,GAAGP,OAAO,CAACC,KAAD,EAAQ,GAAGC,IAAX,CAAvB;;AAEA,QAAIK,OAAO,IAAIA,OAAO,CAACC,MAAvB,EAA+B;AAC7BJ,MAAAA,OAAO,CAACK,GAAR,CAAYF,OAAZ,EAAqBG,KAArB,CAA2BJ,MAA3B,EAAmCK,IAAnC,CAAwCC,eAAe,IAAI;AACzD,YAAIC,MAAJ;;AAEA,YAAID,eAAJ,EAAqB;AACnB,iBAAOf,OAAO,CAACgB,MAAD,CAAP,IAAmBD,eAAe,CAACJ,MAA1C,EAAkD;AAChDK,YAAAA,MAAM,GAAGD,eAAe,CAACE,GAAhB,EAAT;AACD;AACF;;AAEDT,QAAAA,OAAO,CAACR,OAAO,CAACgB,MAAD,CAAP,GAAkBd,SAAlB,GAA8Bc,MAA/B,CAAP;AACD,OAVD;AAWD,KAZD,MAYO;AACLR,MAAAA,OAAO;AACR;AACF,GAlBqC,CAAtC;;AAoBA,SAAOJ,KAAK,GAAGE,SAAS,CAACF,KAAD,EAAQ,GAAGC,IAAX,CAAZ,GAA+BC,SAA3C;AACD,CAtBD","sourcesContent":["const isEmpty = val => val === null || val === undefined;\r\n\r\nexport default ((trigger, event, ...args) => {\r\n  const doTrigger = (event, ...args) => new Promise((resolve, reject) => {\r\n    const results = trigger(event, ...args);\r\n\r\n    if (results && results.length) {\r\n      Promise.all(results).catch(reject).then(resolvedResults => {\r\n        let result;\r\n\r\n        if (resolvedResults) {\r\n          while (isEmpty(result) && resolvedResults.length) {\r\n            result = resolvedResults.pop();\r\n          }\r\n        }\r\n\r\n        resolve(isEmpty(result) ? undefined : result);\r\n      });\r\n    } else {\r\n      resolve();\r\n    }\r\n  });\r\n\r\n  return event ? doTrigger(event, ...args) : doTrigger;\r\n});"]},"metadata":{},"sourceType":"module"}