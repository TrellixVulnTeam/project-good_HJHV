{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { useLayoutEffect, useState } from \"react\";\nimport { UPLOADER_EVENTS } from \"@rpldy/uploader\";\nimport useUploadyContext from \"./useUploadyContext\";\nexport default (Component => props => {\n  const context = useUploadyContext();\n  const {\n    id\n  } = props;\n  const [updater, setUpdater] = useState({\n    update: null,\n    data: null\n  }); //need layout effect to register for REQUEST_PRE_SEND in time (block)\n\n  useLayoutEffect(() => {\n    const handleRequestPreSend = requestData => requestData.items.find(item => item.id === id) && new Promise(resolve => {\n      setUpdater(() => ({\n        update: data => {\n          //unregister handler so this instance doesnt continue listening unnecessarily\n          context.off(UPLOADER_EVENTS.REQUEST_PRE_SEND, handleRequestPreSend);\n          resolve(data);\n        },\n        data: requestData\n      }));\n    });\n\n    if (id) {\n      context.on(UPLOADER_EVENTS.REQUEST_PRE_SEND, handleRequestPreSend);\n    }\n\n    return () => {\n      if (id) {\n        context.off(UPLOADER_EVENTS.REQUEST_PRE_SEND, handleRequestPreSend);\n      }\n    };\n  }, [context, id]);\n  return /*#__PURE__*/React.createElement(Component, _extends({}, props, {\n    updateRequest: updater.update,\n    requestData: updater.data\n  }));\n});","map":{"version":3,"sources":["C:/Users/USER/Documents/GitHub/project-good/project/client/node_modules/@rpldy/shared-ui/lib/esm/withRequestPreSendUpdate.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","React","useLayoutEffect","useState","UPLOADER_EVENTS","useUploadyContext","Component","props","context","id","updater","setUpdater","update","data","handleRequestPreSend","requestData","items","find","item","Promise","resolve","off","REQUEST_PRE_SEND","on","createElement","updateRequest"],"mappings":"AAAA,SAASA,QAAT,GAAoB;AAAEA,EAAAA,QAAQ,GAAGC,MAAM,CAACC,MAAP,IAAiB,UAAUC,MAAV,EAAkB;AAAE,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGC,SAAS,CAACC,MAA9B,EAAsCF,CAAC,EAAvC,EAA2C;AAAE,UAAIG,MAAM,GAAGF,SAAS,CAACD,CAAD,CAAtB;;AAA2B,WAAK,IAAII,GAAT,IAAgBD,MAAhB,EAAwB;AAAE,YAAIN,MAAM,CAACQ,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCJ,MAArC,EAA6CC,GAA7C,CAAJ,EAAuD;AAAEL,UAAAA,MAAM,CAACK,GAAD,CAAN,GAAcD,MAAM,CAACC,GAAD,CAApB;AAA4B;AAAE;AAAE;;AAAC,WAAOL,MAAP;AAAgB,GAA5P;;AAA8P,SAAOH,QAAQ,CAACY,KAAT,CAAe,IAAf,EAAqBP,SAArB,CAAP;AAAyC;;AAE7T,OAAOQ,KAAP,IAAgBC,eAAhB,EAAiCC,QAAjC,QAAiD,OAAjD;AACA,SAASC,eAAT,QAAgC,iBAAhC;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;AACA,gBAAgBC,SAAS,IAAIC,KAAK,IAAI;AACpC,QAAMC,OAAO,GAAGH,iBAAiB,EAAjC;AACA,QAAM;AACJI,IAAAA;AADI,MAEFF,KAFJ;AAGA,QAAM,CAACG,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,CAAC;AACrCS,IAAAA,MAAM,EAAE,IAD6B;AAErCC,IAAAA,IAAI,EAAE;AAF+B,GAAD,CAAtC,CALoC,CAQhC;;AAEJX,EAAAA,eAAe,CAAC,MAAM;AACpB,UAAMY,oBAAoB,GAAGC,WAAW,IAAIA,WAAW,CAACC,KAAZ,CAAkBC,IAAlB,CAAuBC,IAAI,IAAIA,IAAI,CAACT,EAAL,KAAYA,EAA3C,KAAkD,IAAIU,OAAJ,CAAYC,OAAO,IAAI;AACnHT,MAAAA,UAAU,CAAC,OAAO;AAChBC,QAAAA,MAAM,EAAEC,IAAI,IAAI;AACd;AACAL,UAAAA,OAAO,CAACa,GAAR,CAAYjB,eAAe,CAACkB,gBAA5B,EAA8CR,oBAA9C;AACAM,UAAAA,OAAO,CAACP,IAAD,CAAP;AACD,SALe;AAMhBA,QAAAA,IAAI,EAAEE;AANU,OAAP,CAAD,CAAV;AAQD,KAT6F,CAA9F;;AAWA,QAAIN,EAAJ,EAAQ;AACND,MAAAA,OAAO,CAACe,EAAR,CAAWnB,eAAe,CAACkB,gBAA3B,EAA6CR,oBAA7C;AACD;;AAED,WAAO,MAAM;AACX,UAAIL,EAAJ,EAAQ;AACND,QAAAA,OAAO,CAACa,GAAR,CAAYjB,eAAe,CAACkB,gBAA5B,EAA8CR,oBAA9C;AACD;AACF,KAJD;AAKD,GArBc,EAqBZ,CAACN,OAAD,EAAUC,EAAV,CArBY,CAAf;AAsBA,SAAO,aAAaR,KAAK,CAACuB,aAAN,CAAoBlB,SAApB,EAA+BlB,QAAQ,CAAC,EAAD,EAAKmB,KAAL,EAAY;AACrEkB,IAAAA,aAAa,EAAEf,OAAO,CAACE,MAD8C;AAErEG,IAAAA,WAAW,EAAEL,OAAO,CAACG;AAFgD,GAAZ,CAAvC,CAApB;AAID,CApCD","sourcesContent":["function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useLayoutEffect, useState } from \"react\";\nimport { UPLOADER_EVENTS } from \"@rpldy/uploader\";\nimport useUploadyContext from \"./useUploadyContext\";\nexport default (Component => props => {\n  const context = useUploadyContext();\n  const {\n    id\n  } = props;\n  const [updater, setUpdater] = useState({\n    update: null,\n    data: null\n  }); //need layout effect to register for REQUEST_PRE_SEND in time (block)\n\n  useLayoutEffect(() => {\n    const handleRequestPreSend = requestData => requestData.items.find(item => item.id === id) && new Promise(resolve => {\n      setUpdater(() => ({\n        update: data => {\n          //unregister handler so this instance doesnt continue listening unnecessarily\n          context.off(UPLOADER_EVENTS.REQUEST_PRE_SEND, handleRequestPreSend);\n          resolve(data);\n        },\n        data: requestData\n      }));\n    });\n\n    if (id) {\n      context.on(UPLOADER_EVENTS.REQUEST_PRE_SEND, handleRequestPreSend);\n    }\n\n    return () => {\n      if (id) {\n        context.off(UPLOADER_EVENTS.REQUEST_PRE_SEND, handleRequestPreSend);\n      }\n    };\n  }, [context, id]);\n  return /*#__PURE__*/React.createElement(Component, _extends({}, props, {\n    updateRequest: updater.update,\n    requestData: updater.data\n  }));\n});"]},"metadata":{},"sourceType":"module"}