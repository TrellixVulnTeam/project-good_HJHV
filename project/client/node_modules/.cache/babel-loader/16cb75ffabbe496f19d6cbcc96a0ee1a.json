{"ast":null,"code":"import { BATCH_STATES, logger, merge, FILE_STATES } from \"@rpldy/shared\";\nimport { unwrap } from \"@rpldy/simple-state\";\nimport { UPLOADER_EVENTS } from \"../consts\";\nconst BATCH_READY_STATES = [BATCH_STATES.ADDED, BATCH_STATES.PROCESSING, BATCH_STATES.UPLOADING];\nconst BATCH_FINISHED_STATES = [BATCH_STATES.ABORTED, BATCH_STATES.CANCELLED, BATCH_STATES.FINISHED];\n\nconst getBatchFromState = (state, id) => state.batches[id].batch;\n\nconst getBatch = (queue, id) => {\n  return getBatchFromState(queue.getState(), id);\n};\n\nconst isItemBelongsToBatch = (queue, itemId, batchId) => {\n  return queue.getState().items[itemId].batchId === batchId;\n};\n\nconst getBatchDataFromItemId = (queue, itemId) => {\n  const state = queue.getState();\n  const item = state.items[itemId];\n  return state.batches[item.batchId];\n};\n\nconst getBatchFromItemId = (queue, itemId) => {\n  return getBatchDataFromItemId(queue, itemId).batch;\n};\n\nconst removeBatchItems = (queue, batchId) => {\n  const batch = getBatch(queue, batchId);\n  queue.updateState(state => {\n    batch.items.forEach(({\n      id\n    }) => {\n      delete state.items[id];\n      const index = state.itemQueue.indexOf(id);\n\n      if (~index) {\n        state.itemQueue.splice(index, 1);\n      }\n    });\n  });\n};\n\nconst removeBatch = (queue, batchId) => {\n  queue.updateState(state => {\n    delete state.batches[batchId];\n  });\n};\n\nconst cancelBatchForItem = (queue, itemId) => {\n  const batch = getBatchFromItemId(queue, itemId),\n        batchId = batch.id;\n  logger.debugLog(\"uploady.uploader.batchHelpers: cancelling batch: \", {\n    batch\n  });\n  queue.updateState(state => {\n    const batch = getBatchFromState(state, batchId);\n    batch.state = BATCH_STATES.CANCELLED;\n  });\n  triggerUploaderBatchEvent(queue, batchId, UPLOADER_EVENTS.BATCH_CANCEL);\n  removeBatchItems(queue, batchId);\n  removeBatch(queue, batchId);\n};\n\nconst isNewBatchStarting = (queue, itemId) => {\n  const batch = getBatchFromItemId(queue, itemId);\n  return queue.getState().currentBatch !== batch.id;\n};\n\nconst loadNewBatchForItem = (queue, itemId) => {\n  const batch = getBatchFromItemId(queue, itemId);\n  return queue.runCancellable(UPLOADER_EVENTS.BATCH_START, batch).then(isCancelled => {\n    if (!isCancelled) {\n      queue.updateState(state => {\n        state.currentBatch = batch.id;\n      });\n    }\n\n    return !isCancelled;\n  });\n};\n\nconst cleanUpFinishedBatches = queue => {\n  //TODO: schedule clean up on requestAnimationFrame\n  const state = queue.getState();\n  Object.keys(state.batches).forEach(batchId => {\n    const {\n      batch,\n      finishedCounter\n    } = state.batches[batchId];\n    const {\n      orgItemCount\n    } = batch; //shouldnt be the case, but if wasnt cleaned before, it will now\n\n    const alreadyFinalized = getIsBatchFinalized(batch);\n\n    if (orgItemCount === finishedCounter) {\n      queue.updateState(state => {\n        const batch = getBatchFromState(state, batchId); //set batch state to FINISHED before triggering event and removing it from queue\n\n        batch.state = alreadyFinalized ? batch.state : BATCH_STATES.FINISHED;\n\n        if (state.currentBatch === batchId) {\n          state.currentBatch = null;\n        }\n      });\n      logger.debugLog(`uploady.uploader.batchHelpers: cleaning up batch: ${batch.id}`);\n\n      if (!alreadyFinalized) {\n        triggerUploaderBatchEvent(queue, batchId, UPLOADER_EVENTS.BATCH_FINISH);\n      }\n\n      removeBatchItems(queue, batchId);\n      removeBatch(queue, batchId);\n    }\n  });\n};\n\nconst triggerUploaderBatchEvent = (queue, batchId, event) => {\n  const state = queue.getState(),\n        batch = getBatchFromState(state, batchId),\n        //get the most uptodate batch data\n  stateItems = state.items;\n  const eventBatch = { ...unwrap(batch),\n    items: batch.items.map(({\n      id\n    }) => unwrap(stateItems[id]))\n  };\n  queue.trigger(event, eventBatch);\n};\n\nconst getIsItemBatchReady = (queue, itemId) => {\n  const batch = getBatchFromItemId(queue, itemId);\n  return BATCH_READY_STATES.includes(batch.state);\n};\n\nconst detachRecycledFromPreviousBatch = (queue, item) => {\n  const {\n    previousBatch\n  } = item;\n\n  if (item.recycled && previousBatch && queue.getState().batches[previousBatch]) {\n    const {\n      id: batchId\n    } = getBatchFromItemId(queue, item.id);\n\n    if (batchId === previousBatch) {\n      queue.updateState(state => {\n        const batch = getBatchFromState(state, batchId);\n        const index = batch.items.findIndex(({\n          id\n        }) => id === item.id);\n\n        if (~index) {\n          batch.items.splice(index, 1);\n        }\n      });\n    }\n  }\n};\n\nconst preparePendingForUpload = (queue, uploadOptions) => {\n  queue.updateState(state => {\n    //remove pending state from pending batches\n    Object.keys(state.batches).forEach(batchId => {\n      const batchData = state.batches[batchId];\n      const {\n        batch,\n        batchOptions\n      } = batchData;\n\n      if (batch.state === BATCH_STATES.PENDING) {\n        batch.items.forEach(item => {\n          item.state = FILE_STATES.ADDED;\n        });\n        batch.state = BATCH_STATES.ADDED;\n        batchData.batchOptions = merge({}, batchOptions, uploadOptions);\n      }\n    });\n  });\n};\n\nconst removePendingBatches = queue => {\n  const batches = queue.getState().batches;\n  Object.keys(batches).filter(batchId => batches[batchId].batch.state === BATCH_STATES.PENDING).forEach(batchId => {\n    removeBatchItems(queue, batchId);\n    removeBatch(queue, batchId);\n  });\n};\n\nconst incrementBatchFinishedCounter = (queue, batchId) => {\n  queue.updateState(state => {\n    state.batches[batchId].finishedCounter += 1;\n  });\n};\n\nconst getIsBatchFinalized = batch => BATCH_FINISHED_STATES.includes(batch.state);\n\nexport { loadNewBatchForItem, isNewBatchStarting, cancelBatchForItem, getBatchFromItemId, isItemBelongsToBatch, getBatchDataFromItemId, cleanUpFinishedBatches, triggerUploaderBatchEvent, getIsItemBatchReady, getBatchFromState, detachRecycledFromPreviousBatch, preparePendingForUpload, removePendingBatches, incrementBatchFinishedCounter, getIsBatchFinalized };","map":{"version":3,"sources":["C:/Users/USER/Documents/GitHub/project-good/project/client/node_modules/@rpldy/uploader/lib/esm/queue/batchHelpers.js"],"names":["BATCH_STATES","logger","merge","FILE_STATES","unwrap","UPLOADER_EVENTS","BATCH_READY_STATES","ADDED","PROCESSING","UPLOADING","BATCH_FINISHED_STATES","ABORTED","CANCELLED","FINISHED","getBatchFromState","state","id","batches","batch","getBatch","queue","getState","isItemBelongsToBatch","itemId","batchId","items","getBatchDataFromItemId","item","getBatchFromItemId","removeBatchItems","updateState","forEach","index","itemQueue","indexOf","splice","removeBatch","cancelBatchForItem","debugLog","triggerUploaderBatchEvent","BATCH_CANCEL","isNewBatchStarting","currentBatch","loadNewBatchForItem","runCancellable","BATCH_START","then","isCancelled","cleanUpFinishedBatches","Object","keys","finishedCounter","orgItemCount","alreadyFinalized","getIsBatchFinalized","BATCH_FINISH","event","stateItems","eventBatch","map","trigger","getIsItemBatchReady","includes","detachRecycledFromPreviousBatch","previousBatch","recycled","findIndex","preparePendingForUpload","uploadOptions","batchData","batchOptions","PENDING","removePendingBatches","filter","incrementBatchFinishedCounter"],"mappings":"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","sourcesContent":["import { BATCH_STATES, logger, merge, FILE_STATES } from \"@rpldy/shared\";\nimport { unwrap } from \"@rpldy/simple-state\";\nimport { UPLOADER_EVENTS } from \"../consts\";\nconst BATCH_READY_STATES = [BATCH_STATES.ADDED, BATCH_STATES.PROCESSING, BATCH_STATES.UPLOADING];\nconst BATCH_FINISHED_STATES = [BATCH_STATES.ABORTED, BATCH_STATES.CANCELLED, BATCH_STATES.FINISHED];\n\nconst getBatchFromState = (state, id) => state.batches[id].batch;\n\nconst getBatch = (queue, id) => {\n  return getBatchFromState(queue.getState(), id);\n};\n\nconst isItemBelongsToBatch = (queue, itemId, batchId) => {\n  return queue.getState().items[itemId].batchId === batchId;\n};\n\nconst getBatchDataFromItemId = (queue, itemId) => {\n  const state = queue.getState();\n  const item = state.items[itemId];\n  return state.batches[item.batchId];\n};\n\nconst getBatchFromItemId = (queue, itemId) => {\n  return getBatchDataFromItemId(queue, itemId).batch;\n};\n\nconst removeBatchItems = (queue, batchId) => {\n  const batch = getBatch(queue, batchId);\n  queue.updateState(state => {\n    batch.items.forEach(({\n      id\n    }) => {\n      delete state.items[id];\n      const index = state.itemQueue.indexOf(id);\n\n      if (~index) {\n        state.itemQueue.splice(index, 1);\n      }\n    });\n  });\n};\n\nconst removeBatch = (queue, batchId) => {\n  queue.updateState(state => {\n    delete state.batches[batchId];\n  });\n};\n\nconst cancelBatchForItem = (queue, itemId) => {\n  const batch = getBatchFromItemId(queue, itemId),\n        batchId = batch.id;\n  logger.debugLog(\"uploady.uploader.batchHelpers: cancelling batch: \", {\n    batch\n  });\n  queue.updateState(state => {\n    const batch = getBatchFromState(state, batchId);\n    batch.state = BATCH_STATES.CANCELLED;\n  });\n  triggerUploaderBatchEvent(queue, batchId, UPLOADER_EVENTS.BATCH_CANCEL);\n  removeBatchItems(queue, batchId);\n  removeBatch(queue, batchId);\n};\n\nconst isNewBatchStarting = (queue, itemId) => {\n  const batch = getBatchFromItemId(queue, itemId);\n  return queue.getState().currentBatch !== batch.id;\n};\n\nconst loadNewBatchForItem = (queue, itemId) => {\n  const batch = getBatchFromItemId(queue, itemId);\n  return queue.runCancellable(UPLOADER_EVENTS.BATCH_START, batch).then(isCancelled => {\n    if (!isCancelled) {\n      queue.updateState(state => {\n        state.currentBatch = batch.id;\n      });\n    }\n\n    return !isCancelled;\n  });\n};\n\nconst cleanUpFinishedBatches = queue => {\n  //TODO: schedule clean up on requestAnimationFrame\n  const state = queue.getState();\n  Object.keys(state.batches).forEach(batchId => {\n    const {\n      batch,\n      finishedCounter\n    } = state.batches[batchId];\n    const {\n      orgItemCount\n    } = batch; //shouldnt be the case, but if wasnt cleaned before, it will now\n\n    const alreadyFinalized = getIsBatchFinalized(batch);\n\n    if (orgItemCount === finishedCounter) {\n      queue.updateState(state => {\n        const batch = getBatchFromState(state, batchId); //set batch state to FINISHED before triggering event and removing it from queue\n\n        batch.state = alreadyFinalized ? batch.state : BATCH_STATES.FINISHED;\n\n        if (state.currentBatch === batchId) {\n          state.currentBatch = null;\n        }\n      });\n      logger.debugLog(`uploady.uploader.batchHelpers: cleaning up batch: ${batch.id}`);\n\n      if (!alreadyFinalized) {\n        triggerUploaderBatchEvent(queue, batchId, UPLOADER_EVENTS.BATCH_FINISH);\n      }\n\n      removeBatchItems(queue, batchId);\n      removeBatch(queue, batchId);\n    }\n  });\n};\n\nconst triggerUploaderBatchEvent = (queue, batchId, event) => {\n  const state = queue.getState(),\n        batch = getBatchFromState(state, batchId),\n        //get the most uptodate batch data\n  stateItems = state.items;\n  const eventBatch = { ...unwrap(batch),\n    items: batch.items.map(({\n      id\n    }) => unwrap(stateItems[id]))\n  };\n  queue.trigger(event, eventBatch);\n};\n\nconst getIsItemBatchReady = (queue, itemId) => {\n  const batch = getBatchFromItemId(queue, itemId);\n  return BATCH_READY_STATES.includes(batch.state);\n};\n\nconst detachRecycledFromPreviousBatch = (queue, item) => {\n  const {\n    previousBatch\n  } = item;\n\n  if (item.recycled && previousBatch && queue.getState().batches[previousBatch]) {\n    const {\n      id: batchId\n    } = getBatchFromItemId(queue, item.id);\n\n    if (batchId === previousBatch) {\n      queue.updateState(state => {\n        const batch = getBatchFromState(state, batchId);\n        const index = batch.items.findIndex(({\n          id\n        }) => id === item.id);\n\n        if (~index) {\n          batch.items.splice(index, 1);\n        }\n      });\n    }\n  }\n};\n\nconst preparePendingForUpload = (queue, uploadOptions) => {\n  queue.updateState(state => {\n    //remove pending state from pending batches\n    Object.keys(state.batches).forEach(batchId => {\n      const batchData = state.batches[batchId];\n      const {\n        batch,\n        batchOptions\n      } = batchData;\n\n      if (batch.state === BATCH_STATES.PENDING) {\n        batch.items.forEach(item => {\n          item.state = FILE_STATES.ADDED;\n        });\n        batch.state = BATCH_STATES.ADDED;\n        batchData.batchOptions = merge({}, batchOptions, uploadOptions);\n      }\n    });\n  });\n};\n\nconst removePendingBatches = queue => {\n  const batches = queue.getState().batches;\n  Object.keys(batches).filter(batchId => batches[batchId].batch.state === BATCH_STATES.PENDING).forEach(batchId => {\n    removeBatchItems(queue, batchId);\n    removeBatch(queue, batchId);\n  });\n};\n\nconst incrementBatchFinishedCounter = (queue, batchId) => {\n  queue.updateState(state => {\n    state.batches[batchId].finishedCounter += 1;\n  });\n};\n\nconst getIsBatchFinalized = batch => BATCH_FINISHED_STATES.includes(batch.state);\n\nexport { loadNewBatchForItem, isNewBatchStarting, cancelBatchForItem, getBatchFromItemId, isItemBelongsToBatch, getBatchDataFromItemId, cleanUpFinishedBatches, triggerUploaderBatchEvent, getIsItemBatchReady, getBatchFromState, detachRecycledFromPreviousBatch, preparePendingForUpload, removePendingBatches, incrementBatchFinishedCounter, getIsBatchFinalized };"]},"metadata":{},"sourceType":"module"}