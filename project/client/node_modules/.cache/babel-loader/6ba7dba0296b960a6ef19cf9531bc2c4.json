{"ast":null,"code":"const getPropsExtractor = prop => {\n  const props = [].concat(prop);\n  return arr => arr.map(i => props.map(p => i[p]).join());\n};\n/*\nstringifies props together - will return true for same type of value (ex: function)\neven if refs are different\n */\n\n\nconst isSamePropInArrays = (arr1, arr2, prop) => {\n  let diff = true;\n  const propsExtractor = getPropsExtractor(prop);\n\n  if (arr1 && arr2 && arr1.length === arr2.length) {\n    const props1 = propsExtractor(arr1),\n          props2 = propsExtractor(arr2);\n    diff = !!props1.find((p, i) => p !== props2[i]);\n  }\n\n  return !diff;\n};\n\nexport default isSamePropInArrays;","map":{"version":3,"sources":["C:/Users/USER/Documents/GitHub/project-good/project/client/node_modules/@rpldy/shared/lib/esm/utils/isSamePropInArrays.js"],"names":["getPropsExtractor","prop","props","concat","arr","map","i","p","join","isSamePropInArrays","arr1","arr2","diff","propsExtractor","length","props1","props2","find"],"mappings":"AAAA,MAAMA,iBAAiB,GAAGC,IAAI,IAAI;AAChC,QAAMC,KAAK,GAAG,GAAGC,MAAH,CAAUF,IAAV,CAAd;AACA,SAAOG,GAAG,IAAIA,GAAG,CAACC,GAAJ,CAAQC,CAAC,IAAIJ,KAAK,CAACG,GAAN,CAAUE,CAAC,IAAID,CAAC,CAACC,CAAD,CAAhB,EAAqBC,IAArB,EAAb,CAAd;AACD,CAHD;AAIA;AACA;AACA;AACA;;;AAGA,MAAMC,kBAAkB,GAAG,CAACC,IAAD,EAAOC,IAAP,EAAaV,IAAb,KAAsB;AAC/C,MAAIW,IAAI,GAAG,IAAX;AACA,QAAMC,cAAc,GAAGb,iBAAiB,CAACC,IAAD,CAAxC;;AAEA,MAAIS,IAAI,IAAIC,IAAR,IAAgBD,IAAI,CAACI,MAAL,KAAgBH,IAAI,CAACG,MAAzC,EAAiD;AAC/C,UAAMC,MAAM,GAAGF,cAAc,CAACH,IAAD,CAA7B;AAAA,UACMM,MAAM,GAAGH,cAAc,CAACF,IAAD,CAD7B;AAEAC,IAAAA,IAAI,GAAG,CAAC,CAACG,MAAM,CAACE,IAAP,CAAY,CAACV,CAAD,EAAID,CAAJ,KAAUC,CAAC,KAAKS,MAAM,CAACV,CAAD,CAAlC,CAAT;AACD;;AAED,SAAO,CAACM,IAAR;AACD,CAXD;;AAaA,eAAeH,kBAAf","sourcesContent":["const getPropsExtractor = prop => {\n  const props = [].concat(prop);\n  return arr => arr.map(i => props.map(p => i[p]).join());\n};\n/*\nstringifies props together - will return true for same type of value (ex: function)\neven if refs are different\n */\n\n\nconst isSamePropInArrays = (arr1, arr2, prop) => {\n  let diff = true;\n  const propsExtractor = getPropsExtractor(prop);\n\n  if (arr1 && arr2 && arr1.length === arr2.length) {\n    const props1 = propsExtractor(arr1),\n          props2 = propsExtractor(arr2);\n    diff = !!props1.find((p, i) => p !== props2[i]);\n  }\n\n  return !diff;\n};\n\nexport default isSamePropInArrays;"]},"metadata":{},"sourceType":"module"}