{"ast":null,"code":"import { hasWindow, isProduction } from \"@rpldy/shared\";\nimport { unwrap, isProxiable, isProxy } from \"@rpldy/simple-state\";\nimport { DEFAULT_OPTIONS } from \"./defaults\";\nconst FILE_LIST_SUPPORT = hasWindow() && \"FileList\" in window;\n\nconst getMandatoryDestination = dest => {\n  return {\n    params: {},\n    ...dest\n  };\n};\n\nconst getMandatoryOptions = options => {\n  return { ...DEFAULT_OPTIONS,\n    ...options,\n    destination: options && options.destination ? getMandatoryDestination(options.destination) : null\n  };\n};\n\nconst getIsFileList = files => //in case files list was created in a different context(window) need to check toString\nFILE_LIST_SUPPORT && files instanceof FileList || files.toString() === \"[object FileList]\";\n/***\r\n * will unwrap object from proxy\r\n * if obj itself isnt a proxy, will look for a proxy max 2 levels deep\r\n */\n\n\nconst deepProxyUnwrap = (obj, level = 0) => {\n  let result = obj;\n\n  if (!isProduction()) {\n    if (level < 3 && isProxy(obj)) {\n      result = unwrap(obj);\n    } else if (level < 3 && isProxiable(obj)) {\n      result = Array.isArray(obj) ? obj.map(key => deepProxyUnwrap(obj[key])) : Object.keys(obj).reduce((res, key) => {\n        res[key] = deepProxyUnwrap(obj[key], level + 1);\n        return res;\n      }, {});\n    }\n  }\n\n  return result;\n};\n\nexport { getMandatoryOptions, getIsFileList, deepProxyUnwrap };","map":{"version":3,"sources":["D:/project-good/project/client/node_modules/@rpldy/uploader/lib/esm/utils.js"],"names":["hasWindow","isProduction","unwrap","isProxiable","isProxy","DEFAULT_OPTIONS","FILE_LIST_SUPPORT","window","getMandatoryDestination","dest","params","getMandatoryOptions","options","destination","getIsFileList","files","FileList","toString","deepProxyUnwrap","obj","level","result","Array","isArray","map","key","Object","keys","reduce","res"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,YAApB,QAAwC,eAAxC;AACA,SAASC,MAAT,EAAiBC,WAAjB,EAA8BC,OAA9B,QAA6C,qBAA7C;AACA,SAASC,eAAT,QAAgC,YAAhC;AACA,MAAMC,iBAAiB,GAAGN,SAAS,MAAM,cAAcO,MAAvD;;AAEA,MAAMC,uBAAuB,GAAGC,IAAI,IAAI;AACtC,SAAO;AACLC,IAAAA,MAAM,EAAE,EADH;AAEL,OAAGD;AAFE,GAAP;AAID,CALD;;AAOA,MAAME,mBAAmB,GAAGC,OAAO,IAAI;AACrC,SAAO,EAAE,GAAGP,eAAL;AACL,OAAGO,OADE;AAELC,IAAAA,WAAW,EAAED,OAAO,IAAIA,OAAO,CAACC,WAAnB,GAAiCL,uBAAuB,CAACI,OAAO,CAACC,WAAT,CAAxD,GAAgF;AAFxF,GAAP;AAID,CALD;;AAOA,MAAMC,aAAa,GAAGC,KAAK,IAAI;AAC/BT,iBAAiB,IAAIS,KAAK,YAAYC,QAAtC,IAAkDD,KAAK,CAACE,QAAN,OAAqB,mBADvE;AAEA;AACA;AACA;AACA;;;AAGA,MAAMC,eAAe,GAAG,CAACC,GAAD,EAAMC,KAAK,GAAG,CAAd,KAAoB;AAC1C,MAAIC,MAAM,GAAGF,GAAb;;AAEA,MAAI,CAAClB,YAAY,EAAjB,EAAqB;AACnB,QAAImB,KAAK,GAAG,CAAR,IAAahB,OAAO,CAACe,GAAD,CAAxB,EAA+B;AAC7BE,MAAAA,MAAM,GAAGnB,MAAM,CAACiB,GAAD,CAAf;AACD,KAFD,MAEO,IAAIC,KAAK,GAAG,CAAR,IAAajB,WAAW,CAACgB,GAAD,CAA5B,EAAmC;AACxCE,MAAAA,MAAM,GAAGC,KAAK,CAACC,OAAN,CAAcJ,GAAd,IAAqBA,GAAG,CAACK,GAAJ,CAAQC,GAAG,IAAIP,eAAe,CAACC,GAAG,CAACM,GAAD,CAAJ,CAA9B,CAArB,GAAiEC,MAAM,CAACC,IAAP,CAAYR,GAAZ,EAAiBS,MAAjB,CAAwB,CAACC,GAAD,EAAMJ,GAAN,KAAc;AAC9GI,QAAAA,GAAG,CAACJ,GAAD,CAAH,GAAWP,eAAe,CAACC,GAAG,CAACM,GAAD,CAAJ,EAAWL,KAAK,GAAG,CAAnB,CAA1B;AACA,eAAOS,GAAP;AACD,OAHyE,EAGvE,EAHuE,CAA1E;AAID;AACF;;AAED,SAAOR,MAAP;AACD,CAfD;;AAiBA,SAASV,mBAAT,EAA8BG,aAA9B,EAA6CI,eAA7C","sourcesContent":["import { hasWindow, isProduction } from \"@rpldy/shared\";\r\nimport { unwrap, isProxiable, isProxy } from \"@rpldy/simple-state\";\r\nimport { DEFAULT_OPTIONS } from \"./defaults\";\r\nconst FILE_LIST_SUPPORT = hasWindow() && \"FileList\" in window;\r\n\r\nconst getMandatoryDestination = dest => {\r\n  return {\r\n    params: {},\r\n    ...dest\r\n  };\r\n};\r\n\r\nconst getMandatoryOptions = options => {\r\n  return { ...DEFAULT_OPTIONS,\r\n    ...options,\r\n    destination: options && options.destination ? getMandatoryDestination(options.destination) : null\r\n  };\r\n};\r\n\r\nconst getIsFileList = files => //in case files list was created in a different context(window) need to check toString\r\nFILE_LIST_SUPPORT && files instanceof FileList || files.toString() === \"[object FileList]\";\r\n/***\r\n * will unwrap object from proxy\r\n * if obj itself isnt a proxy, will look for a proxy max 2 levels deep\r\n */\r\n\r\n\r\nconst deepProxyUnwrap = (obj, level = 0) => {\r\n  let result = obj;\r\n\r\n  if (!isProduction()) {\r\n    if (level < 3 && isProxy(obj)) {\r\n      result = unwrap(obj);\r\n    } else if (level < 3 && isProxiable(obj)) {\r\n      result = Array.isArray(obj) ? obj.map(key => deepProxyUnwrap(obj[key])) : Object.keys(obj).reduce((res, key) => {\r\n        res[key] = deepProxyUnwrap(obj[key], level + 1);\r\n        return res;\r\n      }, {});\r\n    }\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\nexport { getMandatoryOptions, getIsFileList, deepProxyUnwrap };"]},"metadata":{},"sourceType":"module"}