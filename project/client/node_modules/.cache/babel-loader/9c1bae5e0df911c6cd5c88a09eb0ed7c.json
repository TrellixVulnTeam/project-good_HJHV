{"ast":null,"code":"import { useEffect, useMemo } from \"react\";\nimport { logger } from \"@rpldy/shared\";\nimport createUploader from \"@rpldy/uploader\";\nexport default ((options, listeners) => {\n  //avoid creating new instance of uploader (unless enhancer method changed)\n  const uploader = useMemo(() => {\n    logger.debugLog(\"Uploady creating a new uploader instance\", options);\n    return createUploader(options);\n  }, //dont recreate the uploader when options changed - we do update later\n  //eslint-disable-next-line react-hooks/exhaustive-deps\n  [options.enhancer]); //Forgoing any kind of memoization. Probably not worth the comparison work to save on the options merge\n\n  uploader.update(options);\n  useEffect(() => {\n    if (listeners) {\n      logger.debugLog(\"Uploady setting event listeners\", listeners);\n      Object.entries(listeners).forEach(([name, m]) => {\n        uploader.on(name, m);\n      });\n    }\n\n    return () => {\n      if (listeners) {\n        logger.debugLog(\"Uploady removing event listeners\", listeners);\n        Object.entries(listeners).forEach(([name, m]) => uploader.off(name, m));\n      }\n    };\n  }, [listeners, uploader]);\n  return uploader;\n});","map":{"version":3,"sources":["C:/Users/USER/Documents/GitHub/project-good/project/client/node_modules/@rpldy/shared-ui/lib/esm/useUploader.js"],"names":["useEffect","useMemo","logger","createUploader","options","listeners","uploader","debugLog","enhancer","update","Object","entries","forEach","name","m","on","off"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,OAApB,QAAmC,OAAnC;AACA,SAASC,MAAT,QAAuB,eAAvB;AACA,OAAOC,cAAP,MAA2B,iBAA3B;AACA,gBAAgB,CAACC,OAAD,EAAUC,SAAV,KAAwB;AACtC;AACA,QAAMC,QAAQ,GAAGL,OAAO,CAAC,MAAM;AAC7BC,IAAAA,MAAM,CAACK,QAAP,CAAgB,0CAAhB,EAA4DH,OAA5D;AACA,WAAOD,cAAc,CAACC,OAAD,CAArB;AACD,GAHuB,EAGrB;AACH;AACA,GAACA,OAAO,CAACI,QAAT,CALwB,CAAxB,CAFsC,CAOjB;;AAErBF,EAAAA,QAAQ,CAACG,MAAT,CAAgBL,OAAhB;AACAJ,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIK,SAAJ,EAAe;AACbH,MAAAA,MAAM,CAACK,QAAP,CAAgB,iCAAhB,EAAmDF,SAAnD;AACAK,MAAAA,MAAM,CAACC,OAAP,CAAeN,SAAf,EAA0BO,OAA1B,CAAkC,CAAC,CAACC,IAAD,EAAOC,CAAP,CAAD,KAAe;AAC/CR,QAAAA,QAAQ,CAACS,EAAT,CAAYF,IAAZ,EAAkBC,CAAlB;AACD,OAFD;AAGD;;AAED,WAAO,MAAM;AACX,UAAIT,SAAJ,EAAe;AACbH,QAAAA,MAAM,CAACK,QAAP,CAAgB,kCAAhB,EAAoDF,SAApD;AACAK,QAAAA,MAAM,CAACC,OAAP,CAAeN,SAAf,EAA0BO,OAA1B,CAAkC,CAAC,CAACC,IAAD,EAAOC,CAAP,CAAD,KAAeR,QAAQ,CAACU,GAAT,CAAaH,IAAb,EAAmBC,CAAnB,CAAjD;AACD;AACF,KALD;AAMD,GAdQ,EAcN,CAACT,SAAD,EAAYC,QAAZ,CAdM,CAAT;AAeA,SAAOA,QAAP;AACD,CA1BD","sourcesContent":["import { useEffect, useMemo } from \"react\";\nimport { logger } from \"@rpldy/shared\";\nimport createUploader from \"@rpldy/uploader\";\nexport default ((options, listeners) => {\n  //avoid creating new instance of uploader (unless enhancer method changed)\n  const uploader = useMemo(() => {\n    logger.debugLog(\"Uploady creating a new uploader instance\", options);\n    return createUploader(options);\n  }, //dont recreate the uploader when options changed - we do update later\n  //eslint-disable-next-line react-hooks/exhaustive-deps\n  [options.enhancer]); //Forgoing any kind of memoization. Probably not worth the comparison work to save on the options merge\n\n  uploader.update(options);\n  useEffect(() => {\n    if (listeners) {\n      logger.debugLog(\"Uploady setting event listeners\", listeners);\n      Object.entries(listeners).forEach(([name, m]) => {\n        uploader.on(name, m);\n      });\n    }\n\n    return () => {\n      if (listeners) {\n        logger.debugLog(\"Uploady removing event listeners\", listeners);\n        Object.entries(listeners).forEach(([name, m]) => uploader.off(name, m));\n      }\n    };\n  }, [listeners, uploader]);\n  return uploader;\n});"]},"metadata":{},"sourceType":"module"}